using System;
using System.ComponentModel;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Interactivity;

namespace CM.UI.Desktop.Behaviors
{
    public class DataGridAutoGeneratedColumnsBehavior : Behavior<DataGrid>
    {
        protected override void OnAttached()
        {
            AssociatedObject.AutoGeneratingColumn += OnAutoGeneratingColumn;
        }

        protected override void OnDetaching()
        {
            AssociatedObject.AutoGeneratingColumn -= OnAutoGeneratingColumn;
        }

        protected void OnAutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            var displayName = GetPropertyDisplayName(e.PropertyDescriptor);

            e.Column.Header = !string.IsNullOrEmpty(displayName) ? displayName : e.PropertyName;

            e.Column.HeaderStyle = new Style(typeof(DataGridColumnHeader));
            e.Column.HeaderStyle.Setters.Add(new Setter(Control.HorizontalContentAlignmentProperty, HorizontalAlignment.Center));

            if (!(e.Column is DataGridTextColumn dataGridTextColumn))
                return;

            e.Column.CellStyle = new Style(typeof(DataGridCell));

            if (e.PropertyType == typeof(int) || e.PropertyType == typeof(int?))
            {
                e.Column.CellStyle.Setters.Add(new Setter(TextBlock.TextAlignmentProperty, TextAlignment.Center));

                if (e.PropertyName == "Id")
                    e.Column.Width = new DataGridLength(60, DataGridLengthUnitType.Pixel);
            }
            else if (e.PropertyType == typeof(decimal) || e.PropertyType == typeof(decimal?))
            {
                e.Column.CellStyle.Setters.Add(new Setter(TextBlock.TextAlignmentProperty, TextAlignment.Right));

                dataGridTextColumn.Binding = new Binding(e.PropertyName) { StringFormat = "{0:N}" };

                e.Column.Width = new DataGridLength(80, DataGridLengthUnitType.Pixel);
            }
            else if (e.PropertyType == typeof(DateTime) || e.PropertyType == typeof(DateTime?))
            {
                e.Column.CellStyle.Setters.Add(new Setter(TextBlock.TextAlignmentProperty, TextAlignment.Center));

                if (e.PropertyName == "DataInclusao" || e.PropertyName == "DataAlteracao")
                {
                    dataGridTextColumn.Binding = new Binding(e.PropertyName) { StringFormat = "dd/MM/yyyy hh:mm:ss" };
                    e.Column.Width = new DataGridLength(150, DataGridLengthUnitType.Pixel);
                }
                else
                {
                    dataGridTextColumn.Binding = new Binding(e.PropertyName) { StringFormat = "dd/MM/yyyy" };
                    e.Column.Width = new DataGridLength(100, DataGridLengthUnitType.Pixel);
                }
            }
            else
            {
                e.Column.CellStyle.Setters.Add(new Setter(TextBlock.TextWrappingProperty, TextWrapping.Wrap));
                e.Column.CellStyle.Setters.Add(new Setter(TextBlock.TextAlignmentProperty, TextAlignment.Left));

                e.Column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            }
        }

        protected static string GetPropertyDisplayName(object descriptor)
        {
            if (descriptor is PropertyDescriptor pd)
            {
                if ((pd.Attributes[typeof(DisplayNameAttribute)] is DisplayNameAttribute attr) && (attr != DisplayNameAttribute.Default))
                {
                    return attr.DisplayName;
                }
            }
            else
            {
                var pi = descriptor as PropertyInfo;

                if (pi == null)
                    return null;

                var attrs = pi.GetCustomAttributes(typeof(DisplayNameAttribute), true);

                foreach (var att in attrs)
                {
                    if ((att is DisplayNameAttribute attribute) && (attribute != DisplayNameAttribute.Default))
                    {
                        return attribute.DisplayName;
                    }
                }
            }

            return null;
        }
    }
}
