using CM.UI.Model;
using CM.UI.Model.Attributes;
using System;
using System.ComponentModel;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Interactivity;
using TextAlignment = System.Windows.TextAlignment;

namespace CM.UI.Desktop.Behaviors
{
    public class DataGridAutoGeneratedColumnsBehavior : Behavior<DataGrid>
    {
        protected override void OnAttached()
        {
            AssociatedObject.AutoGeneratingColumn += OnAutoGeneratingColumn;
        }

        protected override void OnDetaching()
        {
            AssociatedObject.AutoGeneratingColumn -= OnAutoGeneratingColumn;
        }

        protected void OnAutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            var attributeBrowser = GetAttributeBrowser(e.PropertyDescriptor);

            if (attributeBrowser != null && !attributeBrowser.Visible)
            {
                e.Cancel = true;
                return;
            }

            e.Column.Header = !string.IsNullOrEmpty(attributeBrowser?.Title) ? attributeBrowser.Title : e.PropertyName;
            e.Column.HeaderStyle = new Style(typeof(DataGridColumnHeader));
            e.Column.HeaderStyle.Setters.Add(new Setter(Control.HorizontalContentAlignmentProperty, HorizontalAlignment.Center));

            if (!(e.Column is DataGridTextColumn dataGridTextColumn))
                return;

            e.Column.CellStyle = new Style(typeof(DataGridCell));

            if (e.PropertyType == typeof(int) || e.PropertyType == typeof(int?))
            {
                e.Column.CellStyle.Setters.Add(new Setter(TextBlock.TextAlignmentProperty, ObterTextAlignment(attributeBrowser?.Alignment, TextAlignment.Center)));

                if (e.PropertyName == "Id")
                    e.Column.Width = new DataGridLength(60, DataGridLengthUnitType.Pixel);
            }
            else if (e.PropertyType == typeof(decimal) || e.PropertyType == typeof(decimal?))
            {
                e.Column.CellStyle.Setters.Add(new Setter(TextBlock.TextAlignmentProperty, ObterTextAlignment(attributeBrowser?.Alignment, TextAlignment.Right)));

                dataGridTextColumn.Binding = new Binding(e.PropertyName) { StringFormat = "{0:N}" };

                e.Column.Width = new DataGridLength(attributeBrowser?.FixedWidth > 0 ? attributeBrowser.FixedWidth : 80, DataGridLengthUnitType.Pixel);
            }
            else if (e.PropertyType == typeof(DateTime) || e.PropertyType == typeof(DateTime?))
            {
                e.Column.CellStyle.Setters.Add(new Setter(TextBlock.TextAlignmentProperty, ObterTextAlignment(attributeBrowser?.Alignment, TextAlignment.Center)));

                if (e.PropertyName == "DataInclusao" || e.PropertyName == "DataAlteracao")
                {
                    dataGridTextColumn.Binding = new Binding(e.PropertyName) { StringFormat = "dd/MM/yyyy hh:mm:ss" };
                    e.Column.Width = new DataGridLength(150, DataGridLengthUnitType.Pixel);
                }
                else
                {
                    dataGridTextColumn.Binding = new Binding(e.PropertyName) { StringFormat = "dd/MM/yyyy" };
                    e.Column.Width = new DataGridLength(attributeBrowser?.FixedWidth > 0 ? attributeBrowser.FixedWidth : 100, DataGridLengthUnitType.Pixel);
                }
            }
            else
            {
                if (e.PropertyType == typeof(string) && e.PropertyName == "Id")
                {
                    e.Column.CellStyle.Setters.Add(new Setter(TextBlock.TextAlignmentProperty, ObterTextAlignment(attributeBrowser?.Alignment, TextAlignment.Center)));

                    e.Column.Width = new DataGridLength(attributeBrowser?.FixedWidth > 0 ? attributeBrowser.FixedWidth : 60, DataGridLengthUnitType.Pixel);

                    e.Column.DisplayIndex = 0;
                }
                else
                {
                    if (attributeBrowser != null && attributeBrowser.WrapText)
                        e.Column.CellStyle.Setters.Add(new Setter(TextBlock.TextWrappingProperty, TextWrapping.Wrap));

                    e.Column.CellStyle.Setters.Add(new Setter(TextBlock.TextAlignmentProperty, ObterTextAlignment(attributeBrowser?.Alignment, TextAlignment.Left)));

                    e.Column.Width = attributeBrowser?.FixedWidth > 0
                        ? new DataGridLength(attributeBrowser.FixedWidth, DataGridLengthUnitType.Pixel)
                        : new DataGridLength(1, DataGridLengthUnitType.Star);
                }
            }
        }

        private TextAlignment? ObterTextAlignment(BrowserAttributeAlignment? browserAttributeAlignment, TextAlignment? defaultTextAlignment = null)
        {
            if (browserAttributeAlignment == null)
                return defaultTextAlignment;

            switch (browserAttributeAlignment)
            {
                case BrowserAttributeAlignment.Justify:
                    return TextAlignment.Justify;
                case BrowserAttributeAlignment.Center:
                    return TextAlignment.Center;
                case BrowserAttributeAlignment.Left:
                    return TextAlignment.Left;
                case BrowserAttributeAlignment.Right:
                    return TextAlignment.Right;
                default:
                    return defaultTextAlignment;
            }
        }

        //protected static string GetAttributeDisplayName(object descriptor)
        //{
        //    if (descriptor is PropertyDescriptor pd)
        //    {
        //        if (pd.Attributes[typeof(DisplayNameAttribute)] is DisplayNameAttribute attr && (attr != DisplayNameAttribute.Default))
        //        {
        //            return attr.DisplayName;
        //        }
        //    }
        //    else
        //    {
        //        var propertyInfo = descriptor as PropertyInfo;

        //        if (propertyInfo == null)
        //            return null;

        //        var attrs = propertyInfo.GetCustomAttributes(typeof(DisplayNameAttribute), true);

        //        foreach (var att in attrs)
        //        {
        //            if ((att is DisplayNameAttribute attribute) && (attribute != DisplayNameAttribute.Default))
        //                return attribute.DisplayName;
        //        }
        //    }

        //    return null;
        //}

        protected static BrowserAttribute GetAttributeBrowser(object descriptor)
        {
            ValidatesOnDataErrors // adicionar esta propriedade em todos os campos no form.

            if (descriptor is PropertyDescriptor propertyDescriptor)
            {
                if (propertyDescriptor.Attributes[typeof(BrowserAttribute)] is BrowserAttribute attributeBrowser)
                    return attributeBrowser;
            }
            else
            {
                var propertyInfo = descriptor as PropertyInfo;

                if (propertyInfo == null)
                    return null;

                var attributes = propertyInfo.GetCustomAttributes(typeof(BrowserAttribute), true);

                foreach (var attribute in attributes)
                {
                    if (attribute is BrowserAttribute attributeBrowser)
                        return attributeBrowser;
                }
            }

            return null;
        }
    }
}
